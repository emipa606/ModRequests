<?xml version="1.0" encoding="utf-8"?>
<Defs>
  <ThinkTreeDef>
    <defName>NAT_Collector</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Despawned -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Despawned</treeDef>
        </li>

        <!-- Downed -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Downed</treeDef>
        </li>
		
		<li Class="NAT.ThinkNode_InStealMode">
          <subNodes>
            <li Class="NAT.ThinkNode_CanSteal">
              <subNodes>
                <li Class="NAT.ThinkNode_HasPawnToSteal">
                  <subNodes>
                    <li Class="NAT.JobGiver_CollectorSteal_Pawns" />
                  </subNodes>
                </li>
				<li Class="NAT.ThinkNode_HasThingToSteal">
                  <subNodes>
                    <li Class="NAT.JobGiver_CollectorSteal_Things" />
                  </subNodes>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
		
		<li Class="ThinkNode_ConditionalBurning">
          <subNodes>
            <li Class="JobGiver_ExtinguishSelf" />
          </subNodes>
        </li>
		
		<li Class="NAT.JobGiver_CollectorWander" />
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>

  <ThinkTreeDef>
    <defName>NAT_CollectorConstant</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Despawned -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Despawned</treeDef>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
  <ThinkTreeDef>
    <defName>NAT_RustedSoldier</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Despawned -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Despawned</treeDef>
        </li>

        <!-- Downed -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Downed</treeDef>
        </li>
        
        <!-- Do a queued job -->
        <li Class="ThinkNode_QueuedJob" />
		
		<li Class="ThinkNodeConditional_EscapingHoldingPlatform">
          <subNodes>
            <li Class="JobGiver_EscapingHoldingPlatform" />
          </subNodes>
        </li>
		
		<li Class="ThinkNode_Subtree">
          <treeDef>BurningResponse</treeDef>
        </li>
		
		<li Class="ThinkNode_ConditionalOfPlayerFaction">
          <subNodes>
            <li Class="ThinkNode_Tagger">
              <tagToGive>DraftedOrder</tagToGive>
              <subNodes>
                <li Class="JobGiver_MoveToStandable" />
                <li Class="JobGiver_Orders" />
              </subNodes>
            </li>
          </subNodes>
        </li>

        <!-- Lord -->
        <li Class="ThinkNode_Subtree">
          <treeDef>LordDuty</treeDef>
        </li>
		
		<li Class="ThinkNode_ConditionalOfPlayerFaction">
          <subNodes>
		    <li Class="JobGiver_AIFightEnemies">
               <targetAcquireRadius>65</targetAcquireRadius>
               <targetKeepRadius>72</targetKeepRadius>
            </li>
			<li Class="NAT.JobGiver_MakeRustedWeapon" />
		    <li Class="JobGiver_SeekAllowedArea" />
            <li Class="JobGiver_ShamblerWander">
               <wanderRadius>3</wanderRadius>
            </li>
          </subNodes>
        </li>

        <!-- Idle -->
        <li Class="ThinkNode_Tagger">
          <tagToGive>Idle</tagToGive>
          <subNodes>
            <li Class="JobGiver_WanderAnywhere">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>
        
        <!-- Idle error -->
        <li Class="JobGiver_IdleError"/>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
  <ThinkTreeDef>
    <defName>NAT_RustedSoldierConstant</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Despawned -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Despawned</treeDef>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
  <ThinkTreeDef>
    <defName>NAT_RustedOfficerConstant</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Despawned -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Despawned</treeDef>
        </li>
		
		<li Class="NAT.JobGiver_RustedOfficer" />
		
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
  <ThinkTreeDef>
    <defName>NAT_RustedTrooper</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Despawned -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Despawned</treeDef>
        </li>

        <!-- Downed -->
        <li Class="ThinkNode_Subtree">
          <treeDef>Downed</treeDef>
        </li>
        
        <!-- Do a queued job -->
        <li Class="ThinkNode_QueuedJob" />
		
		<li Class="ThinkNodeConditional_EscapingHoldingPlatform">
          <subNodes>
            <li Class="JobGiver_EscapingHoldingPlatform" />
          </subNodes>
        </li>
		
		<li Class="ThinkNode_Subtree">
          <treeDef>BurningResponse</treeDef>
        </li>
		
        <!-- Lord -->
        <li Class="ThinkNode_Subtree">
          <treeDef>LordDuty</treeDef>
        </li>
		
		<li Class="JobGiver_AIFightEnemies">
          <targetAcquireRadius>90</targetAcquireRadius>
          <targetKeepRadius>145</targetKeepRadius>
        </li>
		
		<li Class="JobGiver_ExitMapRandom">
          <defaultLocomotion>Walk</defaultLocomotion>
        </li>
		
        <li Class="JobGiver_ShamblerWander">
          <wanderRadius>17</wanderRadius>
        </li>

        <!-- Idle -->
        <li Class="ThinkNode_Tagger">
          <tagToGive>Idle</tagToGive>
          <subNodes>
            <li Class="JobGiver_WanderAnywhere">
              <maxDanger>Deadly</maxDanger>
            </li>
          </subNodes>
        </li>
        
        <!-- Idle error -->
        <li Class="JobGiver_IdleError"/>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>
  
</Defs>