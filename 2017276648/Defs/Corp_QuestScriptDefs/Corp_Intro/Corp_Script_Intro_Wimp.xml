<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <QuestScriptDef>
    <defName>Corp_Intro_Wimp</defName>
    <defaultChallengeRating>1</defaultChallengeRating>
    <expireDaysRange>2</expireDaysRange>
    <isRootSpecial>true</isRootSpecial>
    <questNameRules>
      <rulesStrings>
        <li>questName->the [adjAny] [asker_royalTitleInCurrentFaction]</li>

        <!-- Pieces -->
        <li>adjAny->wimpy</li>
        <li>adjAny->cowardly</li>
        <li>adjAny->fearful</li>
        <li>adjAny->anxious</li>
        <li>adjAny->cowering</li>
        <li>adjAny->craven</li>
        <li>adjAny->fainthearted</li>
        <li>adjAny->frightened</li>
        <li>adjAny->gutless</li>
        <li>adjAny->jittery</li>
        <li>adjAny->soft</li>
        <li>adjAny->spineless</li>
        <li>adjAny->timid</li>

      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <include>
        <li>QuestHospitalityCommon</li>
      </include>
      <rulesStrings>
        <li>questDescription->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name] is calling from nearby. [asker_pronoun] is being followed by an angry [animalKindDef_label]! [asker_pronoun] says [asker_pronoun] only wanted to see the landscape on a quick walk, and never expected such a deadly threat.\n\n[asker_nameDef] wants you to keep [asker_objective] safe at [map_definite] for a few hours until [asker_possessive] shuttle can come pick [asker_objective] up. [asker_pronoun] promises not to be offended by your body odors or lack of manners.
\n[asker_pronoun] will bestow [royalFavorReward] [asker_faction_royalFavorLabel] on whoever accepts this quest. This is enough favor to receive the corporate rank of Independant Contractor.  Its not enough to get any sort of reward or benefit, but it does at least get your foot in the door.
\nBe warned - those who rise in the ranks of the corporations become quite greedy, and demand only the best food, clothing, and accommodations!</li>
      </rulesStrings>
    </questDescriptionRules>

    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_GetMap" />
        <li Class="QuestNode_GetWalkInSpot" />

        <!-- Require royal favor rewards enabled for this quest to run -->
        <li Class="QuestNode_RequireRoyalFavorFromFaction">
          <faction>CORP_Corporation</faction>
        </li>

        <!-- Royal favor reward to accepter -->
        <li Class="QuestNode_Set">
          <name>royalFavorReward</name>
          <value>1</value>
        </li>

        <!-- Generate Asker -->
        <li Class="QuestNode_GeneratePawn">
          <kindDef>Corp_WimpyVicePresident</kindDef>
          <storeAs>asker</storeAs>
          <faction>CORP_Corporation</faction>
          <biocodeWeaponChance>1</biocodeWeaponChance>
          <forcedTraits>
            <li>Wimp</li>
          </forcedTraits>
        </li>
        <li Class="QuestNode_PawnsArrive">
          <pawns>$asker</pawns>
          <joinPlayer>true</joinPlayer>
        </li>

        <!-- Asker leaves on cleanup -->
        <li Class="QuestNode_LeaveOnCleanup">
          <pawns>$asker</pawns>
          <sendStandardLetter>false</sendStandardLetter>
        </li>

        <!-- Asker never does random mood caused mental breaks -->
        <li Class="QuestNode_DisableRandomMoodCausedMentalBreaks">
          <pawns>$asker</pawns>
        </li>

        <!-- Manhunter animal -->
        <li Class="QuestNode_Set">
          <name>points</name>
          <value>37</value> <!-- Enough points to get a single weak animal  -->
        </li>
        <li Class="QuestNode_Delay">
          <delayTicks>1800</delayTicks>
          <node Class="QuestNode_ViolentQuestsAllowed">
            <node Class="QuestNode_ManhunterPack">
              <customLetterLabel>Angry [animalKindDef_label]</customLetterLabel>
              <customLetterText>The angry [animalKindDef_label] has come to get [asker_nameFull].\n\nWhile it is weak, it does appear to be highly motivated.</customLetterText>
            </node>
            <elseNode Class="QuestNode_Sequence">
              <nodes>
                <li Class="QuestNode_GetAnimalKindByPoints" />
                <li Class="QuestNode_GeneratePawn">
                  <kindDef>$animalKindDef</kindDef>
                  <storeAs>peacefulAnimal</storeAs>
                </li>
                <li Class="QuestNode_PawnsArrive">
                  <pawns>$peacefulAnimal</pawns>
                  <customLetterLabel>[animalKindDef_label] arrived</customLetterLabel>
                  <customLetterText>The "deadly" [animalKindDef_label] that [asker_nameDef] was fleeing has arrived.\n\nIt turned out to be quite gentle and not aggressive at all.</customLetterText>
                </li>
              </nodes>
            </elseNode>            
          </node>
        </li>
        
        <!-- Shuttle -->
        <li Class="QuestNode_ShuttleDelay">
          <delayTicks>7500</delayTicks>
          <lodgers>$asker</lodgers>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_GenerateShuttle">
                <requiredPawns>$asker</requiredPawns>
                <storeAs>shuttle</storeAs>
              </li>
              <li Class="QuestNode_SpawnSkyfaller">
                <skyfallerDef>ShuttleIncoming</skyfallerDef>
                <innerThings>$shuttle</innerThings>
                <lookForSafeSpot>True</lookForSafeSpot>
                <factionOfForSafeSpot>$asker</factionOfForSafeSpot>
              </li>
              <li Class="QuestNode_SendShuttleAwayOnCleanup">
                <shuttle>$shuttle</shuttle>
              </li>
              <li Class="QuestNode_InspectString">
                <targets>$asker</targets>
                <inspectString>Should depart on shuttle</inspectString>
              </li>
              <li Class="QuestNode_Letter">
                <label>Shuttle arrived</label>
                <text>The shuttle has arrived to collect [asker_nameDef].</text>
                <lookTargets>$shuttle</lookTargets>
              </li>
              <li Class="QuestNode_ShuttleLeaveDelay">
                <delayTicks>45000</delayTicks>
                <shuttle>$shuttle</shuttle>
                <node Class="QuestNode_Sequence">
                  <nodes>
                    <li Class="QuestNode_SendShuttleAway"> <!-- this can complete the quest if the shuttle is already correctly loaded! -->
                      <shuttle>$shuttle</shuttle>
                    </li>
                    <li Class="QuestNode_End">
                      <outcome>Fail</outcome>
                    </li>
                  </nodes>
                </node>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Home faction -->
        <li Class="QuestNode_ExtraFaction">
          <pawns>$asker</pawns>
          <factionType>HomeFaction</factionType>
          <faction>CORP_Corporation</faction>
        </li>

        <!-- Lock his apparel -->
        <li Class="QuestNode_SetAllApparelLocked">
          <pawns>$asker</pawns>
        </li>

        <!-- - - - - - - -  -->
        <!-- End conditions -->
        <!-- - - - - - - -  -->

        <!-- Asker died -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Guest died: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text>{SUBJECT_definite}, who you were charged to protect, has died. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Surgery Violation -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.SurgeryViolation</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Unauthorized surgery: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text>Unauthorized, violating surgery has been performed on {SUBJECT_definite}, who you were charged to protect. Because of this violation, [asker_pronoun] will now attempt to leave. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Lodger arrested -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.Arrested</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Captured: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text>{SUBJECT_definite}, who you were charged to host, has been arrested. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Asker left map -->
        <li Class="QuestNode_Signal">
          <inSignal>asker.LeftMap</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Guest lost: {SUBJECT_definite}</label>
                <letterDef>NegativeEvent</letterDef>
                <text>{SUBJECT_definite}, who you were charged to protect, has left the designated settlement. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Shuttle destroyed -->
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Shuttle destroyed</label>
                <letterDef>NegativeEvent</letterDef>
                <text>The shuttle sent to collect [asker_nameDef] has been destroyed. [asker_pronoun] will now leave on foot. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Give royal favor to accepter -->
        <li Class="QuestNode_GiveRoyalFavor">
          <inSignal>shuttle.SentSatisfied</inSignal>
          <giveToAccepter>true</giveToAccepter>
          <factionOf>$asker</factionOf>
          <amount>$royalFavorReward</amount>
        </li>
        
        <!-- Shuttle sent -->
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.SentSatisfied</inSignal>
          <node Class="QuestNode_End">
            <outcome>Success</outcome>
            <sendStandardLetter>true</sendStandardLetter>
          </node>
        </li>
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.SentUnsatisfied</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label>Quest failed: [resolvedQuestName]</label>
                <letterDef>NegativeEvent</letterDef>
                <text>The shuttle sent to collect [asker_nameDef] has departed without [asker_objective]. [asker_pronoun] will now leave on foot. [failLetterEndingCommon]</text>
              </li>
              <li Class="QuestNode_End">
                <outcome>Fail</outcome>
                <goodwillChangeAmount>-5</goodwillChangeAmount>
                <goodwillChangeFactionOf>$asker</goodwillChangeFactionOf>
              </li>
            </nodes>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

</Defs>
