<?xml version="1.0" encoding="utf-8" ?>
<Defs>
			<!-- 	
			Rooms for Labyrinth PathWidth = 4 
			
			LotName must be filled in and unquie! But unlike defNames they can end in a number.  
			LotTag will be used in future for controlled randomization
			
			The lotSize x and z values for labyrinth spawning will be proportional to LabyrinthDef PathWidth value, 
			will be combination of L1,L2 or L3, where p is pathWidth  
			p=4
			L1=2(p+1)=10, L2=3(p+1)=15 ,L3=4(p+1)=20
			
			There are 5 possible room types: T1,T2,T3,T4,and T5. 
			T1,T2,and T4 have rotational varients v/h, thier shape positions are wrt the bottom left  
			T3 and T5 are radial so their positions are wrt a focal point (tick intersection)
			T1=L1xL2 = 10x15 || 15x10
			T2=L1xL3 = 10x20 || 20x10
			T3=L2xL2 = 15x15 (L shaped)
			T4=L2xL3 = 15x20 || 20x15 (T shaped)
			T5=L3xL3 = 20x20 (+ shaped)
			
			==Shapes==
			ShapeNameTag must be filled and unique to other shapes
			ShapeDefTag is the DefName of the thingDef or TerrainDef you want to spawn in as shape
			ShapeStuffTag is the stuff the DefName (if made of stuff) will use 
			ShapeName defines the nature of the shape and how it uses the Points:
				Rectangle
				Circle
				Triangle
				Line
				Point
				Points2
				Points3
				Points4
				
			
			Use of shapes via Points (A through D), each point is a IntVec3, so it takes in (int,int,int) as (x,y,z). 
			The y value is used to input metadata to the spawner, 
				PointA.y is the rotation direction, 
				PointB.y > 0 is bool value for thing eraser (eraser will not spawn a thing but it will instead erase what is there)
				PointC.y > 0 is bool value is for if terrain is roofed
				PointD.y > 0 is bool value is for if terrain clears cell
				
			
			
			-->
	<PRimUtility.MapLotDef>
		<defName>[string]</defName>
		<mapLotDef>
			<LotName>[string]</LotName>
			<LotTags><li>[string]</li></LotTags>
			<LotSize>[IntVec3]</LotSize>
			
			<useBlueprintDef>[bool]</useBlueprintDef>
			<BlueprintDefName>[string]</BlueprintDefName>
			<Shapes> 
				<li>
					<ShapeNameTag>[string]</ShapeNameTag>
					<ShapeDefTag>[string]</ShapeDefTag>
					<ShapeStuffTag>[string]</ShapeStuffTag>
					<ShapeName>[string]</ShapeName>
					<PointA>[IntVec3]</PointA>
					<PointB>([IntVec3]</PointB>
					<PointC>[IntVec3]</PointC>
					<PointD>[IntVec3]</PointD>
				</li>
				
			</Shapes>
	  </mapLotDef>
	</PRimUtility.MapLotDef>
	
	</Defs>
